<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.5.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>cn.dmdream</groupId>
    <artifactId>fairyhouse</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>fairyhouse</name>
    <packaging>war</packaging><!--指定项目类型，打包生成的是war包-->
    <description>玲珑之家</description>

    <properties>
        <!--声明java版本-->
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
        <!--Spring Data Jpa，会自动导入依赖的包如hibernate的实现类-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <!--Spring Data Redis，会自动注入RedisTemplate模板对象-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <!--Spring boot的web模块依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!--maven引入lombok依赖，IDE也需要安装插件-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <!--Spring Boot测试模块-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!--Mysql，制定了5.XX版本，JPA依赖此包-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.16</version>
        </dependency>
        <!-- 热部署，IDEA中需要开启配置才能使用，要不ctrl+F9手动编译 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <!-- optional=true,依赖不会往下传递，如果有项目依赖本项目，并且想要使用devtools，需要重新引入 -->
            <optional>true</optional>
            <!-- scope=true ,计算用于编译，测试等的各种classpath路径,有助于确定在项目分布中需要导入的依赖-->
            <scope>true</scope>
        </dependency>
        <!--jsp支持-核心-->
        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-jasper</artifactId>
        </dependency>
        <!--jsp支持-JSTL表达式-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
        </dependency>
        <!--七牛云SDK，用到了短信sms和对象储存-->
        <dependency>
            <groupId>com.qiniu</groupId>
            <artifactId>qiniu-java-sdk</artifactId>
            <version>7.2.0</version><!--最新版本-->
        </dependency>
        <!--腾讯云短信-->
        <dependency>
            <groupId>com.github.qcloudsms</groupId>
            <artifactId>qcloudsms</artifactId>
            <version>1.0.6</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!--SpringBoot的Maven插件，在编译、打包时都会需要-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!-- 用于决定当前运行的进程是否被（分叉）管理，此设置在以下两种情况下会被自动启用：1.有明确的指定jvm参数路径或工作路径 2.存在devtools  -->
                    <fork>true</fork><!-- 如果没有该配置，热部署的devtools不生效 PS：按照上面的说明其实这里默认会配置的 -->
                </configuration>
            </plugin>
            <!-- 自定义配置spring Boot使用的JDK版本，用于编译 -->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <!--maven使用package命令导出项目时都会自己运行一遍测试类，此设置可以忽略测试-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <testFailureIgnore>true</testFailureIgnore>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
